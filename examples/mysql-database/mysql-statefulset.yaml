apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
      app.kubernetes.io/name: mysql
  serviceName: mysql
  replicas: 3
  template:
    metadata:
      labels:
        app: mysql
        app.kubernetes.io/name: mysql
    spec:
      initContainers:
      - name: init-mysql
        image: mysql:8.4.0
        command:
        - bash
        - "-c"
        - |
          set -ex
          # Generate mysql server-id from pod ordinal index.
          [[ $HOSTNAME =~ -([0-9]+)$ ]] || exit 1
          ordinal=${BASH_REMATCH[1]}
          echo [mysqld] > /mnt/conf.d/server-id.cnf
          # Add an offset to avoid reserved server-id=0 value.
          echo server-id=$((100 + $ordinal)) >> /mnt/conf.d/server-id.cnf
          # Copy appropriate conf.d files from config-map to emptyDir.
          if [[ $ordinal -eq 0 ]]; then
            cp /mnt/config-map/primary.cnf /mnt/conf.d/
          else
            cp /mnt/config-map/replica.cnf /mnt/conf.d/
          # Add relay-log and relay-log-index to prevent replica from trying to use another replica's relay log.
            echo "[mysqld]" > /mnt/conf.d/zz-override.cnf
            echo "relay-log=${HOSTNAME}-relay-bin" >> /mnt/conf.d/zz-override.cnf
            echo "relay-log-index=${HOSTNAME}-relay-bin.index" >> /mnt/conf.d/zz-override.cnf
          fi
        volumeMounts:
        - name: conf
          mountPath: /mnt/conf.d
        - name: config-map
          mountPath: /mnt/config-map
      - name: clone-mysql
        image: percona/percona-xtrabackup:8.4.0
        securityContext:
          runAsUser: 0
        command:
        - bash
        - "-c"
        - |
          set -ex
          microdnf install -y nmap-ncat
          # Skip the clone if data already exists.
          [[ -d /var/lib/mysql/mysql ]] && exit 0
          # Skip the clone on primary (ordinal index 0).
          [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
          ordinal=${BASH_REMATCH[1]}
          [[ $ordinal -eq 0 ]] && exit 0
          
          # Clone data from previous peer.
          ncat --recv-only mysql-$(($ordinal-1)).mysql 3307 | xbstream -x -C /var/lib/mysql
          # Prepare the backup.
          xtrabackup --prepare --target-dir=/var/lib/mysql
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
      containers:
      - name: mysql
        image: mysql:8.4.0
        env:
        - name: MYSQL_ALLOW_EMPTY_PASSWORD
          value: "1"
        ports:
        - name: mysql
          containerPort: 3306
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
        livenessProbe:
          exec:
            command: ["mysqladmin", "ping"]
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          exec:
            # Check we can execute queries over TCP (skip-networking is off).
            command: ["mysql", "-h", "127.0.0.1", "-e", "SELECT 1"]
          initialDelaySeconds: 35
          periodSeconds: 10
          timeoutSeconds: 5
      - name: xtrabackup
        image: percona/percona-xtrabackup:8.4.0
        securityContext:
          runAsUser: 0
        ports:
          - name: xtrabackup
            containerPort: 3307
        command:
          - bash
          - "-c"
          - |
            set -ex
            cd /var/lib/mysql
            
            microdnf install -y nmap-ncat
            
            # Determine binlog position of cloned data, if any.
            if [[ -f xtrabackup_slave_info && "x$(<xtrabackup_slave_info)" != "x" ]]; then
              # We are cloning from a replica. Parse the binlog file and position
              # from the xtrabackup_slave_info file, which uses the old syntax.
              INFO_LINE=$(<xtrabackup_slave_info)
              [[ $INFO_LINE =~ SOURCE_LOG_FILE=\'([^\']*)\' ]] && LOG_FILE=${BASH_REMATCH[1]}
              [[ $INFO_LINE =~ SOURCE_LOG_POS=([0-9]*) ]] && LOG_POS=${BASH_REMATCH[1]}
            
              # Exit if parsing fails.
              if [[ -z "$LOG_FILE" || -z "$LOG_POS" ]]; then
                echo "Error: Could not parse log file and position from xtrabackup_slave_info"
                exit 1
              fi
            
              # Construct the new replication command using the parsed values.
              echo "CHANGE REPLICATION SOURCE TO SOURCE_LOG_FILE='$LOG_FILE', SOURCE_LOG_POS=$LOG_POS" > change_source_to.sql.in
            
              rm -f xtrabackup_slave_info xtrabackup_binlog_info
            
            elif [[ -f xtrabackup_binlog_info ]]; then
              # We're cloning directly from the primary. Parse binlog position.
              [[ `cat xtrabackup_binlog_info` =~ ^(.*?)[[:space:]]+(.*?)$ ]] || exit 1
              rm -f xtrabackup_binlog_info xtrabackup_slave_info
            
              # Construct the new replication command directly.
              echo "CHANGE REPLICATION SOURCE TO SOURCE_LOG_FILE='${BASH_REMATCH[1]}', SOURCE_LOG_POS=${BASH_REMATCH[2]}" > change_source_to.sql.in
            fi
            
            # Check if we need to complete a clone by starting replication.
            if [[ -f change_source_to.sql.in ]]; then
              echo "Waiting for mysqld to be ready (accepting connections)"
              until mysql -h 127.0.0.1 -e "SELECT 1"; do sleep 1; done
            
              echo "Initializing replication from clone position"
              # Corrected the 'e' to '-e' here
              mysql -h 127.0.0.1 \
                    -e "RESET REPLICA ALL; $(<change_source_to.sql.in), \
                            SOURCE_HOST='mysql-0.mysql', \
                            SOURCE_USER='root', \
                            SOURCE_PASSWORD='', \
                            SOURCE_CONNECT_RETRY=10; \
                          START REPLICA;" || exit 1
              # In case of container restart, attempt this at-most-once.
              mv change_source_to.sql.in change_source_to.sql.orig
            fi
            
            # Start a server to send backups when requested by peers.
            exec ncat --listen --keep-open --send-only --max-conns=1 3307 -c \
              "xtrabackup --backup --safe-slave-backup --slave-info --stream=xbstream --host=127.0.0.1 --user=root --password=''"
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
      volumes:
      - name: conf
        emptyDir: {}
      - name: config-map
        configMap:
          name: mysql
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 1Gi
